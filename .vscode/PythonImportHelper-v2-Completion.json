[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "TextTranslationClient",
        "importPath": "azure.ai.translation.text",
        "description": "azure.ai.translation.text",
        "isExtraImport": true,
        "detail": "azure.ai.translation.text",
        "documentation": {}
    },
    {
        "label": "TranslatorCredential",
        "importPath": "azure.ai.translation.text",
        "description": "azure.ai.translation.text",
        "isExtraImport": true,
        "detail": "azure.ai.translation.text",
        "documentation": {}
    },
    {
        "label": "InputTextItem",
        "importPath": "azure.ai.translation.text.models",
        "description": "azure.ai.translation.text.models",
        "isExtraImport": true,
        "detail": "azure.ai.translation.text.models",
        "documentation": {}
    },
    {
        "label": "HttpResponseError",
        "importPath": "azure.core.exceptions",
        "description": "azure.core.exceptions",
        "isExtraImport": true,
        "detail": "azure.core.exceptions",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageFont",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageOps",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "GoogleImagesSearch",
        "importPath": "google_images_search",
        "description": "google_images_search",
        "isExtraImport": true,
        "detail": "google_images_search",
        "documentation": {}
    },
    {
        "label": "KeyBERT",
        "importPath": "keybert",
        "description": "keybert",
        "isExtraImport": true,
        "detail": "keybert",
        "documentation": {}
    },
    {
        "label": "KeyBERT",
        "importPath": "keybert",
        "description": "keybert",
        "isExtraImport": true,
        "detail": "keybert",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "VideoFileClip",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "concatenate_videoclips",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "seo_description",
        "description": "seo_description",
        "isExtraImport": true,
        "detail": "seo_description",
        "documentation": {}
    },
    {
        "label": "azure.cognitiveservices.speech",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "azure.cognitiveservices.speech",
        "description": "azure.cognitiveservices.speech",
        "detail": "azure.cognitiveservices.speech",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "cloudinary",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary",
        "description": "cloudinary",
        "detail": "cloudinary",
        "documentation": {}
    },
    {
        "label": "cloudinary.uploader",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary.uploader",
        "description": "cloudinary.uploader",
        "detail": "cloudinary.uploader",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "EdictAI.asgi",
        "description": "EdictAI.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "EdictAI.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-8lwlf+i#da0ve#z2@=!ov2c4k7@tofm%lgl==(=&_o_9^%_7pj'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-8lwlf+i#da0ve#z2@=!ov2c4k7@tofm%lgl==(=&_o_9^%_7pj'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'edictai_app',",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'edictai_app',\n]\nMIDDLEWARE = [",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'EdictAI.urls'",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "ROOT_URLCONF = 'EdictAI.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "WSGI_APPLICATION = 'EdictAI.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nimport os",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nimport os\n#Added manually",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nimport os\n#Added manually\nMEDIA_URL = '/media/'",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nimport os\n#Added manually\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nEMAIL_HOST='smtp.gmail.com'\nEMAIL_PORT=587",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nimport os\n#Added manually\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nEMAIL_HOST='smtp.gmail.com'\nEMAIL_PORT=587\nEMAIL_HOST_USER='forsih01@gmail.com'\nEMAIL_HOST_PASSWORD='pnyf ylhp dcqu dfft'\nEMAIL_USE_TLS= True",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nEMAIL_HOST='smtp.gmail.com'\nEMAIL_PORT=587\nEMAIL_HOST_USER='forsih01@gmail.com'\nEMAIL_HOST_PASSWORD='pnyf ylhp dcqu dfft'\nEMAIL_USE_TLS= True",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "EdictAI.settings",
        "description": "EdictAI.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nEMAIL_HOST='smtp.gmail.com'\nEMAIL_PORT=587\nEMAIL_HOST_USER='forsih01@gmail.com'\nEMAIL_HOST_PASSWORD='pnyf ylhp dcqu dfft'\nEMAIL_USE_TLS= True",
        "detail": "EdictAI.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "EdictAI.urls",
        "description": "EdictAI.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('',include(\"edictai_app.urls\")),\n]",
        "detail": "EdictAI.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "EdictAI.wsgi",
        "description": "EdictAI.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "EdictAI.wsgi",
        "documentation": {}
    },
    {
        "label": "create_a_talk",
        "kind": 2,
        "importPath": "edictai_app.app.avatar",
        "description": "edictai_app.app.avatar",
        "peekOfCode": "def create_a_talk(text): \n  url = \"https://api.d-id.com/talks\"\n  payload = {\n      \"script\": {\n          \"type\": \"text\",\n          \"subtitles\": \"false\",\n          \"provider\": {\n              \"type\": \"microsoft\",\n              \"voice_id\": \"en-IN-PrabhatNeural\",\n              \"voice_config\": {\"rate\": \"medium\"}",
        "detail": "edictai_app.app.avatar",
        "documentation": {}
    },
    {
        "label": "get_a_talk",
        "kind": 2,
        "importPath": "edictai_app.app.avatar",
        "description": "edictai_app.app.avatar",
        "peekOfCode": "def get_a_talk(id):\n  url = f\"https://api.d-id.com/talks/{id}\"\n  headers = {\n      \"accept\": \"application/json\",\n      \"authorization\": \"Basic Y21sMGFXbzFPVGt5TjBCallYSndaWFJ5WVM1amIyMDp5Njh6eTUwNUl6NVlGVnVDNWc2eEk=\"\n  }\n  response = requests.get(url, headers=headers)\n  return(response)\n# Response\n  # {",
        "detail": "edictai_app.app.avatar",
        "documentation": {}
    },
    {
        "label": "create_a_video",
        "kind": 2,
        "importPath": "edictai_app.app.avatar",
        "description": "edictai_app.app.avatar",
        "peekOfCode": "def create_a_video(name, text):\n  responseTalk = create_a_talk(text)\n  id_value = json.loads(responseTalk.text)[\"id\"]\n  responseLink = get_a_talk(id_value)\n  while 'result_url' not in responseLink.text:\n    time.sleep(1)\n    responseLink = get_a_talk(id_value)\n  result_value = json.loads(responseLink.text)['result_url']\n  print(result_value)\n  response = requests.get(result_value, stream=True)",
        "detail": "edictai_app.app.avatar",
        "documentation": {}
    },
    {
        "label": "translate_chunk_gu",
        "kind": 2,
        "importPath": "edictai_app.app.chunk_translator",
        "description": "edictai_app.app.chunk_translator",
        "peekOfCode": "def translate_chunk_gu(chunk):\n    try:\n        source_language = \"en\"\n        # target_languages = [\"hi-in\", \"ur\", \"pa\", \"gu\", \"mr\", \"kn\", \"ml\", \"ta\", \"or\", \"bn\", \"as\"]\n        target_languages = [\"mr\"]\n        texty = chunk\n        input_text_elements = [InputTextItem(text=texty)]\n        response = text_translator.translate(content=input_text_elements, to=target_languages, from_parameter=source_language)\n        for i, translation in enumerate(response[0].translations):\n            print(f\"{target_languages[i]}: {translation.text}\")",
        "detail": "edictai_app.app.chunk_translator",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "edictai_app.app.chunk_translator",
        "description": "edictai_app.app.chunk_translator",
        "peekOfCode": "key = \"f5ba6394593942aba6c943f9d04eee10\"\nendpoint = \"https://api.cognitive.microsofttranslator.com/\"\nregion = \"centralindia\"\ncredential = TranslatorCredential(key, region)\ntext_translator = TextTranslationClient(endpoint=endpoint, credential=credential)\ndef translate_chunk_gu(chunk):\n    try:\n        source_language = \"en\"\n        # target_languages = [\"hi-in\", \"ur\", \"pa\", \"gu\", \"mr\", \"kn\", \"ml\", \"ta\", \"or\", \"bn\", \"as\"]\n        target_languages = [\"mr\"]",
        "detail": "edictai_app.app.chunk_translator",
        "documentation": {}
    },
    {
        "label": "endpoint",
        "kind": 5,
        "importPath": "edictai_app.app.chunk_translator",
        "description": "edictai_app.app.chunk_translator",
        "peekOfCode": "endpoint = \"https://api.cognitive.microsofttranslator.com/\"\nregion = \"centralindia\"\ncredential = TranslatorCredential(key, region)\ntext_translator = TextTranslationClient(endpoint=endpoint, credential=credential)\ndef translate_chunk_gu(chunk):\n    try:\n        source_language = \"en\"\n        # target_languages = [\"hi-in\", \"ur\", \"pa\", \"gu\", \"mr\", \"kn\", \"ml\", \"ta\", \"or\", \"bn\", \"as\"]\n        target_languages = [\"mr\"]\n        texty = chunk",
        "detail": "edictai_app.app.chunk_translator",
        "documentation": {}
    },
    {
        "label": "region",
        "kind": 5,
        "importPath": "edictai_app.app.chunk_translator",
        "description": "edictai_app.app.chunk_translator",
        "peekOfCode": "region = \"centralindia\"\ncredential = TranslatorCredential(key, region)\ntext_translator = TextTranslationClient(endpoint=endpoint, credential=credential)\ndef translate_chunk_gu(chunk):\n    try:\n        source_language = \"en\"\n        # target_languages = [\"hi-in\", \"ur\", \"pa\", \"gu\", \"mr\", \"kn\", \"ml\", \"ta\", \"or\", \"bn\", \"as\"]\n        target_languages = [\"mr\"]\n        texty = chunk\n        input_text_elements = [InputTextItem(text=texty)]",
        "detail": "edictai_app.app.chunk_translator",
        "documentation": {}
    },
    {
        "label": "credential",
        "kind": 5,
        "importPath": "edictai_app.app.chunk_translator",
        "description": "edictai_app.app.chunk_translator",
        "peekOfCode": "credential = TranslatorCredential(key, region)\ntext_translator = TextTranslationClient(endpoint=endpoint, credential=credential)\ndef translate_chunk_gu(chunk):\n    try:\n        source_language = \"en\"\n        # target_languages = [\"hi-in\", \"ur\", \"pa\", \"gu\", \"mr\", \"kn\", \"ml\", \"ta\", \"or\", \"bn\", \"as\"]\n        target_languages = [\"mr\"]\n        texty = chunk\n        input_text_elements = [InputTextItem(text=texty)]\n        response = text_translator.translate(content=input_text_elements, to=target_languages, from_parameter=source_language)",
        "detail": "edictai_app.app.chunk_translator",
        "documentation": {}
    },
    {
        "label": "text_translator",
        "kind": 5,
        "importPath": "edictai_app.app.chunk_translator",
        "description": "edictai_app.app.chunk_translator",
        "peekOfCode": "text_translator = TextTranslationClient(endpoint=endpoint, credential=credential)\ndef translate_chunk_gu(chunk):\n    try:\n        source_language = \"en\"\n        # target_languages = [\"hi-in\", \"ur\", \"pa\", \"gu\", \"mr\", \"kn\", \"ml\", \"ta\", \"or\", \"bn\", \"as\"]\n        target_languages = [\"mr\"]\n        texty = chunk\n        input_text_elements = [InputTextItem(text=texty)]\n        response = text_translator.translate(content=input_text_elements, to=target_languages, from_parameter=source_language)\n        for i, translation in enumerate(response[0].translations):",
        "detail": "edictai_app.app.chunk_translator",
        "documentation": {}
    },
    {
        "label": "scrap_content",
        "kind": 2,
        "importPath": "edictai_app.app.content_scraper",
        "description": "edictai_app.app.content_scraper",
        "peekOfCode": "def scrap_content(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        soup = BeautifulSoup(response.text, 'html.parser')\n        content_div = soup.find('div', class_='innner-page-main-about-us-content-right-part')\n        # print(content_div)\n        ministry_name = soup.find('div', class_='MinistryNameSubhead text-center').text.strip()\n        title = soup.find('div', class_='text-center').text.strip()\n        posted_on = soup.find('div', class_='ReleaseDateSubHeaddateTime text-center pt20').text.strip()\n        all_text = content_div.get_text().strip()",
        "detail": "edictai_app.app.content_scraper",
        "documentation": {}
    },
    {
        "label": "new_chunk_creator",
        "kind": 2,
        "importPath": "edictai_app.app.creating_chunks",
        "description": "edictai_app.app.creating_chunks",
        "peekOfCode": "def new_chunk_creator(text):\n    text=text.replace('*',\"\")\n    sentences = re.split(r\"<m>|\\\\n|\\n\",text)\n    # sentences=[sentence.split(\"/n\") for sentence in sentences]\n    sentences = [sentence.strip() for sentence in sentences]\n    sentences = [sentence for sentence in sentences if sentence]\n    return (sentences)",
        "detail": "edictai_app.app.creating_chunks",
        "documentation": {}
    },
    {
        "label": "generate_script",
        "kind": 2,
        "importPath": "edictai_app.app.ganerate_script",
        "description": "edictai_app.app.ganerate_script",
        "peekOfCode": "def generate_script(news):\n    # Prompt 1 for Creative Script Generation\n    prompt = f\"\"\"Imagine yourself as a charismatic news anchor, ready to captivate your audience with an engaging video script. Craft a script based on the following news: \"{news}\".\nBegin with a warm greeting and smoothly transition into highlighting the most significant and impactful points from the news article. Ensure that the script maintains an authentic and unbiased tone. Conclude the script by hinting at potential future developments, all within a video length of 60-90 seconds.\nRemember, your goal is to inform, inspire, and engage your viewers. Make it captivating and creative while staying true to the news story.\nPlease break the script into meaningful chunks, each containing about 15-20 words, and separate them using <m>. \"\"\"\n    # Generate the creative script\n    completion = palm.generate_text(    \n        model=model,\n        prompt=prompt,",
        "detail": "edictai_app.app.ganerate_script",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 5,
        "importPath": "edictai_app.app.ganerate_script",
        "description": "edictai_app.app.ganerate_script",
        "peekOfCode": "models = [m for m in palm.list_models() if 'generateText' in m.supported_generation_methods]\nmodel = models[0].name\ndef generate_script(news):\n    # Prompt 1 for Creative Script Generation\n    prompt = f\"\"\"Imagine yourself as a charismatic news anchor, ready to captivate your audience with an engaging video script. Craft a script based on the following news: \"{news}\".\nBegin with a warm greeting and smoothly transition into highlighting the most significant and impactful points from the news article. Ensure that the script maintains an authentic and unbiased tone. Conclude the script by hinting at potential future developments, all within a video length of 60-90 seconds.\nRemember, your goal is to inform, inspire, and engage your viewers. Make it captivating and creative while staying true to the news story.\nPlease break the script into meaningful chunks, each containing about 15-20 words, and separate them using <m>. \"\"\"\n    # Generate the creative script\n    completion = palm.generate_text(    ",
        "detail": "edictai_app.app.ganerate_script",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "edictai_app.app.ganerate_script",
        "description": "edictai_app.app.ganerate_script",
        "peekOfCode": "model = models[0].name\ndef generate_script(news):\n    # Prompt 1 for Creative Script Generation\n    prompt = f\"\"\"Imagine yourself as a charismatic news anchor, ready to captivate your audience with an engaging video script. Craft a script based on the following news: \"{news}\".\nBegin with a warm greeting and smoothly transition into highlighting the most significant and impactful points from the news article. Ensure that the script maintains an authentic and unbiased tone. Conclude the script by hinting at potential future developments, all within a video length of 60-90 seconds.\nRemember, your goal is to inform, inspire, and engage your viewers. Make it captivating and creative while staying true to the news story.\nPlease break the script into meaningful chunks, each containing about 15-20 words, and separate them using <m>. \"\"\"\n    # Generate the creative script\n    completion = palm.generate_text(    \n        model=model,",
        "detail": "edictai_app.app.ganerate_script",
        "documentation": {}
    },
    {
        "label": "generate_image",
        "kind": 2,
        "importPath": "edictai_app.app.generate_image",
        "description": "edictai_app.app.generate_image",
        "peekOfCode": "def generate_image(query,chunk_number):\n    r = requests.post('https://clipdrop-api.co/text-to-image/v1',\n    files = {\n        'prompt': (None, query, 'text/plain')\n    },\n    headers = { 'x-api-key': '1153f9eb75188d98b43284e7e93f4365e54369b0083862c69b5f6603e69d27378fa03979945b22ecd75f4dc413a8d2d0'}\n    )\n    if (r.ok):\n        file_path = f'images/chunk_{chunk_number}.jpg'\n        try:",
        "detail": "edictai_app.app.generate_image",
        "documentation": {}
    },
    {
        "label": "google_image_search_api",
        "kind": 2,
        "importPath": "edictai_app.app.img_search",
        "description": "edictai_app.app.img_search",
        "peekOfCode": "def google_image_search_api(query,chunk_number):\n    if(\"gender equality\" in query):\n        query = \"balanced scale of gender equality\"\n    gis = GoogleImagesSearch('AIzaSyAMTol-nFUexkxuKdo1RcaAb97gCTTWHCI', '1767a2d38eff54836')\n    _search_params = {\n        'q': query,\n        'num': 1,\n        'fileType': 'jpg|png|jpeg',\n        'rights': 'cc_publicdomain|cc_attribute|cc_sharealike|cc_noncommercial|cc_nonderived',\n        'safe': 'off', ##",
        "detail": "edictai_app.app.img_search",
        "documentation": {}
    },
    {
        "label": "rename_images",
        "kind": 2,
        "importPath": "edictai_app.app.img_search",
        "description": "edictai_app.app.img_search",
        "peekOfCode": "def rename_images():\n    # Path to the folder containing the image files\n    folder_path = \"images\"\n    # Get a list of all image files in the folder\n    image_files = [f for f in os.listdir(folder_path) if f.endswith(\".jpg\")]\n    # Loop through each image file and rename it\n    for i, old_name in enumerate(image_files):\n        new_name = f\"coindesk_multiple_{i}.jpg\"\n        old_path = os.path.join(folder_path, old_name)\n        new_path = os.path.join(folder_path, new_name)",
        "detail": "edictai_app.app.img_search",
        "documentation": {}
    },
    {
        "label": "keywords_extraction",
        "kind": 2,
        "importPath": "edictai_app.app.keywords_extraction",
        "description": "edictai_app.app.keywords_extraction",
        "peekOfCode": "def keywords_extraction(sentence):\n    kw_model = KeyBERT()\n    keywords = kw_model.extract_keywords(sentence,keyphrase_ngram_range=(1, 2),top_n=1)\n    return(keywords[0][0])",
        "detail": "edictai_app.app.keywords_extraction",
        "documentation": {}
    },
    {
        "label": "edict_video",
        "kind": 2,
        "importPath": "edictai_app.app.new_final",
        "description": "edictai_app.app.new_final",
        "peekOfCode": "def edict_video(url):\n    # Web Scraping\n    # data = {\"ministry name\": ministry_name,\n    #         \"title\":title,\n    #         \"postedon\": posted_on,\n    #         \"content\" : content,\n    #         \"releaseid\":release_id,\n    #         \"visitorcount\":visitor_count,\n    #         \"releaseLang\":release_lang,\n    #         \"links_with_text\":links_with_text,",
        "detail": "edictai_app.app.new_final",
        "documentation": {}
    },
    {
        "label": "yt_upload_video",
        "kind": 2,
        "importPath": "edictai_app.app.run_upload_video",
        "description": "edictai_app.app.run_upload_video",
        "peekOfCode": "def yt_upload_video(filename, title, description):\n    # topic = \"\"\n    # keywords = get_top_keywords(topic)\n    new_description = description.replace('\"', '')\n    working_directory = os.getcwd().replace('\\\\', '/')\n    print(working_directory)\n    os.system(f''' python3 {working_directory}/edictai/app/upload_video.py --file=\"{working_directory}/videos/{filename}\" --title=\"{title}\" --description=\"{new_description}\" --keywords=\"Edict.AI\" --category=\"22\" --privacyStatus=\"unlisted\" ''')\n# yt_upload_video(\"news_edicted_7.mp4\", \"laude ka title\", \"description ka lauda\")",
        "detail": "edictai_app.app.run_upload_video",
        "documentation": {}
    },
    {
        "label": "search_videos",
        "kind": 2,
        "importPath": "edictai_app.app.seo_description",
        "description": "edictai_app.app.seo_description",
        "peekOfCode": "def search_videos(query, max_results=10):\n    api_key = \"AIzaSyAOJU-5OM8lJu1Yl-787EANdTTCNxMuDNI\"\n    url = f\"https://www.googleapis.com/youtube/v3/search?part=snippet&q={query}&type=video&order=relevance&maxResults={max_results}&key={api_key}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        videos = []\n        for item in data[\"items\"]:\n            title = item[\"snippet\"][\"title\"]\n            videos.append({\"title\": title})",
        "detail": "edictai_app.app.seo_description",
        "documentation": {}
    },
    {
        "label": "get_top_keywords",
        "kind": 2,
        "importPath": "edictai_app.app.seo_description",
        "description": "edictai_app.app.seo_description",
        "peekOfCode": "def get_top_keywords(topic, limit=10):\n    videos = search_videos(topic)\n    if not videos:\n        return []\n    keywords = []\n    for video in videos:\n        title = video[\"title\"]\n        words = title.split(\" \")\n        keywords.extend(words)\n    return keywords",
        "detail": "edictai_app.app.seo_description",
        "documentation": {}
    },
    {
        "label": "large_tts_azure",
        "kind": 2,
        "importPath": "edictai_app.app.text_to_speech_azure",
        "description": "edictai_app.app.text_to_speech_azure",
        "peekOfCode": "def large_tts_azure(chunk, meraNum):\n    # This example requires environment variables named \"SPEECH_KEY\" and \"SPEECH_REGION\"\n    speech_config = speechsdk.SpeechConfig(subscription=\"21186bfc40b44f23bdd5d7afe3f19552\", region=\"centralindia\")\n    audio_config = speechsdk.audio.AudioOutputConfig(use_default_speaker=True)\n    # The language of the voice that speaks.\n    speech_config.speech_synthesis_voice_name='en-US-JennyNeural'\n    # speech_config.speech_synthesis_voice_name='mr-IN-AarohiNeural' \n    speech_synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config, audio_config=None)\n    # Get text from the console and synthesize to the default speaker.\n    # print(\"Enter some text that you want to speak >\")",
        "detail": "edictai_app.app.text_to_speech_azure",
        "documentation": {}
    },
    {
        "label": "bg_image",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "bg_image = Image.open(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\image captioning\\\\background.jpg\")\nbg_width, bg_height = bg_image.size\nnew_bg_size = (800, 600)\nbg_image = bg_image.resize(new_bg_size)\n# Open the two images to be added\nimage1 = Image.open(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\image captioning\\\\test.png\")\nimage2 = Image.open(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\image captioning\\\\image1.jpeg\")\n# Resize the images to the desired size\nnew_size = (200, 200)\nnew_size2 = (200,300)",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "new_bg_size",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "new_bg_size = (800, 600)\nbg_image = bg_image.resize(new_bg_size)\n# Open the two images to be added\nimage1 = Image.open(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\image captioning\\\\test.png\")\nimage2 = Image.open(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\image captioning\\\\image1.jpeg\")\n# Resize the images to the desired size\nnew_size = (200, 200)\nnew_size2 = (200,300)\nimage1 = image1.resize(new_size2)\nimage2 = image2.resize(new_size)",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "bg_image",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "bg_image = bg_image.resize(new_bg_size)\n# Open the two images to be added\nimage1 = Image.open(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\image captioning\\\\test.png\")\nimage2 = Image.open(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\image captioning\\\\image1.jpeg\")\n# Resize the images to the desired size\nnew_size = (200, 200)\nnew_size2 = (200,300)\nimage1 = image1.resize(new_size2)\nimage2 = image2.resize(new_size)\n# Add white border to the images",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "image1",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "image1 = Image.open(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\image captioning\\\\test.png\")\nimage2 = Image.open(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\image captioning\\\\image1.jpeg\")\n# Resize the images to the desired size\nnew_size = (200, 200)\nnew_size2 = (200,300)\nimage1 = image1.resize(new_size2)\nimage2 = image2.resize(new_size)\n# Add white border to the images\nborder_width = 8\nimage1 = ImageOps.expand(image1, border=border_width, fill=(255, 255, 255))",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "image2",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "image2 = Image.open(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\image captioning\\\\image1.jpeg\")\n# Resize the images to the desired size\nnew_size = (200, 200)\nnew_size2 = (200,300)\nimage1 = image1.resize(new_size2)\nimage2 = image2.resize(new_size)\n# Add white border to the images\nborder_width = 8\nimage1 = ImageOps.expand(image1, border=border_width, fill=(255, 255, 255))\nimage2 = ImageOps.expand(image2, border=border_width, fill=(255, 255, 255))",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "new_size",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "new_size = (200, 200)\nnew_size2 = (200,300)\nimage1 = image1.resize(new_size2)\nimage2 = image2.resize(new_size)\n# Add white border to the images\nborder_width = 8\nimage1 = ImageOps.expand(image1, border=border_width, fill=(255, 255, 255))\nimage2 = ImageOps.expand(image2, border=border_width, fill=(255, 255, 255))\n# Calculate the position of the images\nimage1_x = border_width",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "new_size2",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "new_size2 = (200,300)\nimage1 = image1.resize(new_size2)\nimage2 = image2.resize(new_size)\n# Add white border to the images\nborder_width = 8\nimage1 = ImageOps.expand(image1, border=border_width, fill=(255, 255, 255))\nimage2 = ImageOps.expand(image2, border=border_width, fill=(255, 255, 255))\n# Calculate the position of the images\nimage1_x = border_width\nimage1_y = new_bg_size[1] - new_size[1] - border_width - 35",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "image1",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "image1 = image1.resize(new_size2)\nimage2 = image2.resize(new_size)\n# Add white border to the images\nborder_width = 8\nimage1 = ImageOps.expand(image1, border=border_width, fill=(255, 255, 255))\nimage2 = ImageOps.expand(image2, border=border_width, fill=(255, 255, 255))\n# Calculate the position of the images\nimage1_x = border_width\nimage1_y = new_bg_size[1] - new_size[1] - border_width - 35\nimage2_x = new_bg_size[0] - new_size[0] - border_width - 35",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "image2",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "image2 = image2.resize(new_size)\n# Add white border to the images\nborder_width = 8\nimage1 = ImageOps.expand(image1, border=border_width, fill=(255, 255, 255))\nimage2 = ImageOps.expand(image2, border=border_width, fill=(255, 255, 255))\n# Calculate the position of the images\nimage1_x = border_width\nimage1_y = new_bg_size[1] - new_size[1] - border_width - 35\nimage2_x = new_bg_size[0] - new_size[0] - border_width - 35\nimage2_y = border_width",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "border_width",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "border_width = 8\nimage1 = ImageOps.expand(image1, border=border_width, fill=(255, 255, 255))\nimage2 = ImageOps.expand(image2, border=border_width, fill=(255, 255, 255))\n# Calculate the position of the images\nimage1_x = border_width\nimage1_y = new_bg_size[1] - new_size[1] - border_width - 35\nimage2_x = new_bg_size[0] - new_size[0] - border_width - 35\nimage2_y = border_width\n# Paste the images onto the background image at the desired positions\nbg_image.paste(image1, (image1_x, image1_y))",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "image1",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "image1 = ImageOps.expand(image1, border=border_width, fill=(255, 255, 255))\nimage2 = ImageOps.expand(image2, border=border_width, fill=(255, 255, 255))\n# Calculate the position of the images\nimage1_x = border_width\nimage1_y = new_bg_size[1] - new_size[1] - border_width - 35\nimage2_x = new_bg_size[0] - new_size[0] - border_width - 35\nimage2_y = border_width\n# Paste the images onto the background image at the desired positions\nbg_image.paste(image1, (image1_x, image1_y))\nbg_image.paste(image2, (image2_x, image2_y))",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "image2",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "image2 = ImageOps.expand(image2, border=border_width, fill=(255, 255, 255))\n# Calculate the position of the images\nimage1_x = border_width\nimage1_y = new_bg_size[1] - new_size[1] - border_width - 35\nimage2_x = new_bg_size[0] - new_size[0] - border_width - 35\nimage2_y = border_width\n# Paste the images onto the background image at the desired positions\nbg_image.paste(image1, (image1_x, image1_y))\nbg_image.paste(image2, (image2_x, image2_y))\n# Calculate the position of the text",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "image1_x",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "image1_x = border_width\nimage1_y = new_bg_size[1] - new_size[1] - border_width - 35\nimage2_x = new_bg_size[0] - new_size[0] - border_width - 35\nimage2_y = border_width\n# Paste the images onto the background image at the desired positions\nbg_image.paste(image1, (image1_x, image1_y))\nbg_image.paste(image2, (image2_x, image2_y))\n# Calculate the position of the text\ntext = \"Sample Text\"\nfont = ImageFont.truetype(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\Helvetica.ttf\", 50)",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "image1_y",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "image1_y = new_bg_size[1] - new_size[1] - border_width - 35\nimage2_x = new_bg_size[0] - new_size[0] - border_width - 35\nimage2_y = border_width\n# Paste the images onto the background image at the desired positions\nbg_image.paste(image1, (image1_x, image1_y))\nbg_image.paste(image2, (image2_x, image2_y))\n# Calculate the position of the text\ntext = \"Sample Text\"\nfont = ImageFont.truetype(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\Helvetica.ttf\", 50)\ntext_width, text_height = font.getsize(text)",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "image2_x",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "image2_x = new_bg_size[0] - new_size[0] - border_width - 35\nimage2_y = border_width\n# Paste the images onto the background image at the desired positions\nbg_image.paste(image1, (image1_x, image1_y))\nbg_image.paste(image2, (image2_x, image2_y))\n# Calculate the position of the text\ntext = \"Sample Text\"\nfont = ImageFont.truetype(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\Helvetica.ttf\", 50)\ntext_width, text_height = font.getsize(text)\ntext_x1 = border_width",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "image2_y",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "image2_y = border_width\n# Paste the images onto the background image at the desired positions\nbg_image.paste(image1, (image1_x, image1_y))\nbg_image.paste(image2, (image2_x, image2_y))\n# Calculate the position of the text\ntext = \"Sample Text\"\nfont = ImageFont.truetype(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\Helvetica.ttf\", 50)\ntext_width, text_height = font.getsize(text)\ntext_x1 = border_width\ntext_y1 = border_width",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "text = \"Sample Text\"\nfont = ImageFont.truetype(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\Helvetica.ttf\", 50)\ntext_width, text_height = font.getsize(text)\ntext_x1 = border_width\ntext_y1 = border_width\ntext_x2 = new_bg_size[0] - text_width - border_width\ntext_y2 = new_bg_size[1] - text_height - border_width\n# Add text to the image\ndraw = ImageDraw.Draw(bg_image)\ndraw.text((text_x1, text_y1), text, font=font, fill=(255, 255, 255))",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "font = ImageFont.truetype(\"C:\\\\Users\\\\chawl\\\\Desktop\\\\n2v\\\\Helvetica.ttf\", 50)\ntext_width, text_height = font.getsize(text)\ntext_x1 = border_width\ntext_y1 = border_width\ntext_x2 = new_bg_size[0] - text_width - border_width\ntext_y2 = new_bg_size[1] - text_height - border_width\n# Add text to the image\ndraw = ImageDraw.Draw(bg_image)\ndraw.text((text_x1, text_y1), text, font=font, fill=(255, 255, 255))\ndraw.text((text_x2, text_y2), text, font=font, fill=(255, 255, 255))",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "text_x1",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "text_x1 = border_width\ntext_y1 = border_width\ntext_x2 = new_bg_size[0] - text_width - border_width\ntext_y2 = new_bg_size[1] - text_height - border_width\n# Add text to the image\ndraw = ImageDraw.Draw(bg_image)\ndraw.text((text_x1, text_y1), text, font=font, fill=(255, 255, 255))\ndraw.text((text_x2, text_y2), text, font=font, fill=(255, 255, 255))\n# Save the final image\nbg_image.save(\"output.jpg\")",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "text_y1",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "text_y1 = border_width\ntext_x2 = new_bg_size[0] - text_width - border_width\ntext_y2 = new_bg_size[1] - text_height - border_width\n# Add text to the image\ndraw = ImageDraw.Draw(bg_image)\ndraw.text((text_x1, text_y1), text, font=font, fill=(255, 255, 255))\ndraw.text((text_x2, text_y2), text, font=font, fill=(255, 255, 255))\n# Save the final image\nbg_image.save(\"output.jpg\")",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "text_x2",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "text_x2 = new_bg_size[0] - text_width - border_width\ntext_y2 = new_bg_size[1] - text_height - border_width\n# Add text to the image\ndraw = ImageDraw.Draw(bg_image)\ndraw.text((text_x1, text_y1), text, font=font, fill=(255, 255, 255))\ndraw.text((text_x2, text_y2), text, font=font, fill=(255, 255, 255))\n# Save the final image\nbg_image.save(\"output.jpg\")",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "text_y2",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "text_y2 = new_bg_size[1] - text_height - border_width\n# Add text to the image\ndraw = ImageDraw.Draw(bg_image)\ndraw.text((text_x1, text_y1), text, font=font, fill=(255, 255, 255))\ndraw.text((text_x2, text_y2), text, font=font, fill=(255, 255, 255))\n# Save the final image\nbg_image.save(\"output.jpg\")",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 5,
        "importPath": "edictai_app.app.thumbnail",
        "description": "edictai_app.app.thumbnail",
        "peekOfCode": "draw = ImageDraw.Draw(bg_image)\ndraw.text((text_x1, text_y1), text, font=font, fill=(255, 255, 255))\ndraw.text((text_x2, text_y2), text, font=font, fill=(255, 255, 255))\n# Save the final image\nbg_image.save(\"output.jpg\")",
        "detail": "edictai_app.app.thumbnail",
        "documentation": {}
    },
    {
        "label": "pan_effect",
        "kind": 2,
        "importPath": "edictai_app.app.transition",
        "description": "edictai_app.app.transition",
        "peekOfCode": "def pan_effect(input_image_path,custom_duration):\n    output_width = 1440\n    output_height = 2560\n    fps = 24\n    # Load the input image\n    image = cv2.imread(input_image_path)\n    # Calculate the aspect ratio of the input image\n    aspect_ratio = image.shape[1] / image.shape[0]\n    # Scale the image to match the output_height while maintaining aspect ratio\n    scaled_height = output_height",
        "detail": "edictai_app.app.transition",
        "documentation": {}
    },
    {
        "label": "input_image_path",
        "kind": 5,
        "importPath": "edictai_app.app.transition",
        "description": "edictai_app.app.transition",
        "peekOfCode": "input_image_path = 'chunk_3.jpg'\n# Set the output video properties\ndef pan_effect(input_image_path,custom_duration):\n    output_width = 1440\n    output_height = 2560\n    fps = 24\n    # Load the input image\n    image = cv2.imread(input_image_path)\n    # Calculate the aspect ratio of the input image\n    aspect_ratio = image.shape[1] / image.shape[0]",
        "detail": "edictai_app.app.transition",
        "documentation": {}
    },
    {
        "label": "upload_video",
        "kind": 2,
        "importPath": "edictai_app.app.upload_cloudinary",
        "description": "edictai_app.app.upload_cloudinary",
        "peekOfCode": "def upload_video(location):\n    cloudinary.config( \n    cloud_name = \"dcp8kk3ry\", \n    api_key = \"736952496664967\", \n    api_secret = \"nZhxjQEhB4NCe65EwBxIsmBaM8g\" \n    )\n    data = cloudinary.uploader.upload(location, \n    resource_type='video', \n    public_id='video_upload_example')\n    return data['secure_url']",
        "detail": "edictai_app.app.upload_cloudinary",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "edictai_app.migrations.0001_initial",
        "description": "edictai_app.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Videos',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('video', models.FileField(upload_to='video/')),",
        "detail": "edictai_app.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "edictai_app.migrations.0002_images_videos_audio_alter_videos_script_and_more",
        "description": "edictai_app.migrations.0002_images_videos_audio_alter_videos_script_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('edictai_app', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Images',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('image', models.FileField(blank=1, upload_to='images/')),",
        "detail": "edictai_app.migrations.0002_images_videos_audio_alter_videos_script_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "edictai_app.migrations.0003_videos_timestamp_videoclips",
        "description": "edictai_app.migrations.0003_videos_timestamp_videoclips",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('edictai_app', '0002_images_videos_audio_alter_videos_script_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='videos',\n            name='timestamp',\n            field=models.DateTimeField(auto_now=True),\n        ),",
        "detail": "edictai_app.migrations.0003_videos_timestamp_videoclips",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "edictai_app.migrations.0004_videos_link",
        "description": "edictai_app.migrations.0004_videos_link",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('edictai_app', '0003_videos_timestamp_videoclips'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='videos',\n            name='link',\n            field=models.CharField(blank=1, max_length=200),\n        ),",
        "detail": "edictai_app.migrations.0004_videos_link",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "edictai_app.migrations.0005_alter_videos_timestamp",
        "description": "edictai_app.migrations.0005_alter_videos_timestamp",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('edictai_app', '0004_videos_link'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='videos',\n            name='timestamp',\n            field=models.DateTimeField(auto_now_add=True),\n        ),",
        "detail": "edictai_app.migrations.0005_alter_videos_timestamp",
        "documentation": {}
    },
    {
        "label": "EdictaiAppConfig",
        "kind": 6,
        "importPath": "edictai_app.apps",
        "description": "edictai_app.apps",
        "peekOfCode": "class EdictaiAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'edictai_app'",
        "detail": "edictai_app.apps",
        "documentation": {}
    },
    {
        "label": "Videos",
        "kind": 6,
        "importPath": "edictai_app.models",
        "description": "edictai_app.models",
        "peekOfCode": "class Videos(models.Model):\n    video=models.FileField(upload_to=\"video/\",blank=1)\n    name=models.CharField(max_length=100)\n    script=models.TextField(blank=1)\n    audio=models.FileField(upload_to='audios/',blank=1)\n    link=models.CharField(max_length=200,blank=1)\n    timestamp=models.DateTimeField(auto_now_add=True)\nclass Images(models.Model):\n    image=models.FileField(upload_to='images/',blank=1)\n    video=models.ForeignKey(Videos,on_delete=models.CASCADE)",
        "detail": "edictai_app.models",
        "documentation": {}
    },
    {
        "label": "Images",
        "kind": 6,
        "importPath": "edictai_app.models",
        "description": "edictai_app.models",
        "peekOfCode": "class Images(models.Model):\n    image=models.FileField(upload_to='images/',blank=1)\n    video=models.ForeignKey(Videos,on_delete=models.CASCADE)\nclass Videoclips(models.Model):\n    videoclip=models.FileField(upload_to='videoclips/')\n    video=models.ForeignKey(Videos,on_delete=models.CASCADE)\n# Create your models here.",
        "detail": "edictai_app.models",
        "documentation": {}
    },
    {
        "label": "Videoclips",
        "kind": 6,
        "importPath": "edictai_app.models",
        "description": "edictai_app.models",
        "peekOfCode": "class Videoclips(models.Model):\n    videoclip=models.FileField(upload_to='videoclips/')\n    video=models.ForeignKey(Videos,on_delete=models.CASCADE)\n# Create your models here.",
        "detail": "edictai_app.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "edictai_app.urls",
        "description": "edictai_app.urls",
        "peekOfCode": "urlpatterns = [\n    path('',views.index,name=\"index\"),\n    path(\"test/\",views.test,name=\"test\")\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "edictai_app.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "edictai_app.views",
        "description": "edictai_app.views",
        "peekOfCode": "def index(req):\n    if req.method==\"POST\":\n            print(\"post request arrived\")\n            url=req.POST['url']\n            link=new_final.edict_video(url)\n            return redirect(link)\n    return render(req,\"index.html\")\ndef test(req):\n    path = Path(\"videos/chunk_7.mp4\")\n    video=Videos()",
        "detail": "edictai_app.views",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "edictai_app.views",
        "description": "edictai_app.views",
        "peekOfCode": "def test(req):\n    path = Path(\"videos/chunk_7.mp4\")\n    video=Videos()\n    with path.open(mode=\"rb\") as f:\n        video.name=\"ASif\"\n        video.video = File(f, name=path.name)\n        video.save()\n    return HttpResponse(\"Test chal raha hai\")\n# Create your views here.",
        "detail": "edictai_app.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'EdictAI.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]